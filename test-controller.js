// Test complet du contr√¥leur d'estimation globale avec tous les imp√¥ts
const { calculerEstimationGlobaleEntreprise } = require('./dist/services/impots/general/entreprise.general.estimation.js');

// Test avec TOUS les imp√¥ts disponibles
const testDataComplet = {
    dataImpot: {
        // AIB - Accompte sur l'Imp√¥t sur les B√©n√©fices
        'AIB': {
            aibCollected: 1500000,
            aibGranted: 800000,
            periodeFiscale: '2025'
        },
        
        // IS - Imp√¥t sur les Soci√©t√©s
        'IS': {
            chiffreAffaire: 75000000,
            charges: 45000000,
            secteur: 'industry',
            periodeFiscale: '2025'
        },
        
        // IBA - Imp√¥t sur le B√©n√©fice d'Affaire
        'IBA': {
            chiffreAffaire: 25000000,
            charges: 15000000,
            secteur: 'real-estate',
            location: 'cotonou',
            periodeFiscale: '2025'
        },
        
        // IRF - Imp√¥t sur les Revenus Fonciers
        'IRF': {
            revenuLocatif: 8000000,
            isAlreadyTaxed: false,
            periodeFiscale: '2025'
        },
        
        // ITS - Imp√¥t sur les Traitements et Salaires
        'ITS': {
            salaireAnnuel: 350000,
            periodeFiscale: '2025'
        },
        
        // PATENTE - Patente
        'PATENTE': {
            chiffreAffaire: 120000000,
            location: 'cotonou',
            rentalValue: 5000000,
            isImporter: true,
            importExportAmount: 80000000,
            periodeFiscale: '2025'
        },
        
        // TFU - Taxe Fonci√®re Urbaine
        'TFU': {
            possessionProprietes: true,
            NbrProprietes: 2,
            proprietes: [
                {
                    ville: 'cotonou',
                    valeurLocative: 3000000,
                    proprieteBatie: true,
                    tauxTfu: 12
                },
                {
                    ville: 'porto-novo',
                    valeurLocative: 2000000,
                    proprieteBatie: false,
                    tauxTfu: 10
                }
            ],
            periodeFiscale: '2025'
        },
        
        // TVM - Taxe sur les V√©hicules √† Moteur
        'TVM': {
            hasVehicles: true,
            vehicles: [
                {
                    vehicleType: 'company',
                    power: 8
                },
                {
                    vehicleType: 'private',
                    power: 12
                },
                {
                    vehicleType: 'public-persons',
                    capacity: 15
                }
            ],
            periodeFiscale: '2025'
        },
        
        // TPS - Taxe Professionnelle Synth√©tique
        'TPS': {
            chiffreAffaire: 15000000,
            periodeFiscale: '2025'
        }
    }
};

// Test avec quelques imp√¥ts seulement (pour comparaison)
const testDataSimple = {
    dataImpot: {
        'AIB': {
            aibCollected: 1000000,
            aibGranted: 500000,
            periodeFiscale: '2025'
        },
        'IS': {
            chiffreAffaire: 50000000,
            charges: 30000000,
            secteur: 'general',
            periodeFiscale: '2025'
        }
    }
};

console.log('üß™ ========================================');
console.log('üß™ TEST COMPLET DU CONTR√îLEUR D\'ESTIMATION GLOBALE');
console.log('üß™ ========================================');

// Test 1: Calcul simple avec 2 imp√¥ts
console.log('\nüìä TEST 1: Calcul simple (AIB + IS)');
console.log('üìã Donn√©es de test:', JSON.stringify(testDataSimple, null, 2));

try {
    const resultSimple = calculerEstimationGlobaleEntreprise(testDataSimple);
    console.log('‚úÖ R√©sultat du calcul simple (BRUT):');
    console.log(JSON.stringify(resultSimple, null, 2));
} catch (error) {
    console.error('üí• Erreur lors du test simple:', error.message);
}

// Test 2: Calcul complet avec TOUS les imp√¥ts
console.log('\nüìä TEST 2: Calcul complet avec TOUS les imp√¥ts');
console.log('üìã Nombre d\'imp√¥ts √† calculer:', Object.keys(testDataComplet.dataImpot).length);
console.log('üìã Imp√¥ts inclus:', Object.keys(testDataComplet.dataImpot).join(', '));

try {
    const resultComplet = calculerEstimationGlobaleEntreprise(testDataComplet);
    console.log('‚úÖ R√©sultat du calcul complet (BRUT):');
    console.log(JSON.stringify(resultComplet, null, 2));
} catch (error) {
    console.error('üí• Erreur lors du test complet:', error.message);
}

// Test 3: Test avec des donn√©es invalides
console.log('\nüìä TEST 3: Test avec des donn√©es invalides');
const testDataInvalide = {
    dataImpot: {
        'INVALID_IMPOT': {
            invalidField: 'invalidValue',
            periodeFiscale: '2025'
        }
    }
};

try {
    const resultInvalide = calculerEstimationGlobaleEntreprise(testDataInvalide);
    console.log('‚úÖ R√©sultat avec donn√©es invalides (BRUT):');
    console.log(JSON.stringify(resultInvalide, null, 2));
} catch (error) {
    console.error('üí• Erreur lors du test avec donn√©es invalides:', error.message);
}

console.log('\nüèÅ ========================================');
console.log('üèÅ TOUS LES TESTS TERMIN√âS');
console.log('üèÅ ========================================'); 