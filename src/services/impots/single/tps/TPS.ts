/**
 * Interface pour les r√©sultats du calcul TPS
 */
interface ResultatCalculTPS {
    tpsBase: number;
    tpsTotale: number;
    acompte1: number;
    acompte2: number;
    solde: number;
    redevanceRtb: number;
    regimeReel: boolean;
    premiereAnnee: boolean;
    tpsImputableEtat: number;
    tpsImputableLocaux: number;
    messages: string[];
    amendes: Record<string, number>;
  }
  
  /**
   * Interface pour la configuration du moteur
   */
  interface ConfigurationTPS {
    chiffreAffaires: number;
    estPersonnePhysique?: boolean;
    estEntrepriseIndividuelle?: boolean;
    anneeCreation?: number;
    anneeCourante?: number;
    tpsAnneePrecedente?: number;
  }
  
  /**
   * Moteur de calcul pour la TPS (Taxe Professionnelle Synth√©tique) au B√©nin
   * Conforme aux formules fiscales b√©ninoises
   */
  class MoteurCalculTPS {
    // Constantes
    private static readonly TAUX_TPS = 0.05; // 5%
    private static readonly MONTANT_MINIMUM = 10_000; // 10 000 FCFA
    private static readonly REDEVANCE_RTB = 4_000; // 4 000 FCFA
    private static readonly SEUIL_REGIME_REEL = 50_000_000; // 50 millions FCFA
    private static readonly SEUIL_PAIEMENT_BANCAIRE = 100_000; // 100 000 FCFA
    private static readonly AMENDE_ESPECES = 0.05; // 5%
    private static readonly AMENDE_COMPTABILITE = 1_000_000; // 1 million FCFA par exercice
  
    // Propri√©t√©s priv√©es
    private chiffreAffaires: number = 0;
    private estPersonnePhysique: boolean = false;
    private estEntrepriseIndividuelle: boolean = false;
    private anneeCreation: number;
    private anneeCourante: number;
    private tpsAnneePrecedente: number = 0;
    private messages: string[] = [];
    private amendes: Record<string, number> = {};
  
    constructor() {
      const currentYear = new Date().getFullYear();
      this.anneeCreation = currentYear;
      this.anneeCourante = currentYear;
      this.reset();
    }
  
    /**
     * R√©initialise le moteur
     */
    public reset(): void {
      this.chiffreAffaires = 0;
      this.estPersonnePhysique = false;
      this.estEntrepriseIndividuelle = false;
      this.anneeCreation = new Date().getFullYear();
      this.anneeCourante = new Date().getFullYear();
      this.tpsAnneePrecedente = 0;
      this.messages = [];
      this.amendes = {};
    }
  
    /**
     * Configure les param√®tres de calcul
     */
    public configurer(config: ConfigurationTPS): void {
      this.chiffreAffaires = config.chiffreAffaires;
      this.estPersonnePhysique = config.estPersonnePhysique ?? false;
      this.estEntrepriseIndividuelle = config.estEntrepriseIndividuelle ?? false;
      this.anneeCreation = config.anneeCreation ?? new Date().getFullYear();
      this.anneeCourante = config.anneeCourante ?? new Date().getFullYear();
      this.tpsAnneePrecedente = config.tpsAnneePrecedente ?? 0;
      this.messages = [];
      this.amendes = {};
    }

    /**
     * Calcule la TPS de base selon la formule principale
     */
    private calculerTpsBase(): number {
      const tpsCalculee = MoteurCalculTPS.TAUX_TPS * this.chiffreAffaires;
      return Math.max(tpsCalculee, MoteurCalculTPS.MONTANT_MINIMUM);
    }
  
    /**
     * V√©rifie si le passage au r√©gime r√©el est n√©cessaire
     */
    private verifierRegimeReel(): boolean {
      return this.chiffreAffaires > MoteurCalculTPS.SEUIL_REGIME_REEL;
    }
  
    /**
     * V√©rifie si c'est la premi√®re ann√©e d'activit√©
     */
    private estPremiereAnnee(): boolean {
      return this.anneeCreation === this.anneeCourante;
    }
  
    /**
     * Calcule les acomptes provisionnels
     */
    private calculerAcomptes(): [number, number] {
      if (this.estPremiereAnnee()) {
        return [0, 0];
      }
  
      const acompte = this.tpsAnneePrecedente * 0.5;
      return [acompte, acompte];
    }
  
    /**
     * Calcule la TPS imputable en cas de passage au r√©gime r√©el
     */
    private calculerTpsImputable(tpsBase: number): [number, number] {
      if (this.verifierRegimeReel()) {
        const tpsImputable = tpsBase * 0.5;
        return [tpsImputable, tpsImputable];
      }
      return [0, 0];
    }
  
    /**
     * V√©rifie les amendes applicables
     */
    private verifierAmendes(montantPaiement: number = 0): void {
      // Amende pour paiement en esp√®ces
      if (montantPaiement >= MoteurCalculTPS.SEUIL_PAIEMENT_BANCAIRE) {
        const amendeEspeces = montantPaiement * MoteurCalculTPS.AMENDE_ESPECES;
        this.amendes.amendeEspeces = amendeEspeces;
        this.messages.push(
          `‚ö†Ô∏è Amende pour paiement en esp√®ces: ${this.formatMontant(amendeEspeces)} FCFA`
        );
      }
    }
  
    /**
     * Calcule l'amende pour non-pr√©sentation de comptabilit√©
     */
    public calculerAmendeComptabilite(nombreExercices: number): number {
      return MoteurCalculTPS.AMENDE_COMPTABILITE * nombreExercices;
    }
  
    /**
     * Effectue le calcul complet de la TPS
     */
    public calculer(): ResultatCalculTPS {
      // Calcul TPS de base
      const tpsBase = this.calculerTpsBase();
  
      // Ajout de la redevance RTB
      const tpsTotale = tpsBase + MoteurCalculTPS.REDEVANCE_RTB;
  
      // Calcul des acomptes
      const [acompte1, acompte2] = this.calculerAcomptes();
  
      // Calcul du solde
      const solde = tpsBase - (acompte1 + acompte2);
  
      // V√©rification du r√©gime r√©el
      const regimeReel = this.verifierRegimeReel();
  
      // Calcul TPS imputable
      const [tpsImputableEtat, tpsImputableLocaux] = this.calculerTpsImputable(tpsBase);
  
      // Premi√®re ann√©e
      const premiereAnnee = this.estPremiereAnnee();
  
      // Messages informatifs
      this.genererMessages(tpsBase, regimeReel, premiereAnnee);
  
      // V√©rification des amendes
      this.verifierAmendes(tpsTotale);
  
      return {
        tpsBase,
        tpsTotale,
        acompte1,
        acompte2,
        solde,
        redevanceRtb: MoteurCalculTPS.REDEVANCE_RTB,
        regimeReel,
        premiereAnnee,
        tpsImputableEtat,
        tpsImputableLocaux,
        messages: [...this.messages],
        amendes: { ...this.amendes }
      };
    }
  
    /**
     * G√©n√®re les messages informatifs
     */
    private genererMessages(tpsBase: number, regimeReel: boolean, premiereAnnee: boolean): void {
      // Message TPS minimum
      if (tpsBase === MoteurCalculTPS.MONTANT_MINIMUM) {
        this.messages.push(
          `üí° TPS minimum appliqu√©e: ${this.formatMontant(MoteurCalculTPS.MONTANT_MINIMUM)} FCFA`
        );
      }
  
      // Message r√©gime r√©el
      if (regimeReel) {
        this.messages.push(
          `üö® ATTENTION: Passage obligatoire au r√©gime r√©el (CA > ${this.formatMontant(MoteurCalculTPS.SEUIL_REGIME_REEL)} FCFA)`
        );
        this.messages.push(
          "üìã La TPS devient un acompte r√©parti √† parts √©gales:"
        );
        this.messages.push(
          `   ‚Ä¢ 50% imputable sur les imp√¥ts d'√âtat: ${this.formatMontant(tpsBase * 0.5)} FCFA`
        );
        this.messages.push(
          `   ‚Ä¢ 50% imputable sur les imp√¥ts locaux: ${this.formatMontant(tpsBase * 0.5)} FCFA`
        );
      }
  
      // Message premi√®re ann√©e
      if (premiereAnnee) {
        this.messages.push(
          "üéØ Premi√®re ann√©e d'activit√©: Dispense d'acomptes provisionnels"
        );
      }
  
      // Message redevance RTB
      this.messages.push(
        `üì∫ Redevance RTB automatiquement ajout√©e: ${this.formatMontant(MoteurCalculTPS.REDEVANCE_RTB)} FCFA`
      );
  
      // Messages de dates limites
      if (!premiereAnnee) {
        this.messages.push(
          "üìÖ Dates limites:",
          "   ‚Ä¢ 1er acompte: 10 f√©vrier",
          "   ‚Ä¢ 2e acompte: 10 juin",
          "   ‚Ä¢ Solde: 30 avril de l'ann√©e suivante"
        );
      }
    }
  
    /**
     * Formate un montant avec des s√©parateurs de milliers
     */
    private formatMontant(montant: number): string {
      return new Intl.NumberFormat('fr-FR', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }).format(montant);
    }
  
    /**
     * G√©n√®re un rapport d√©taill√© des calculs
     */
    public genererRapport(): string {
      const resultat = this.calculer();
  
      let rapport = `
  === RAPPORT DE CALCUL TPS - B√âNIN ===
  
  PARAM√àTRES:
  ‚Ä¢ Chiffre d'affaires: ${this.formatMontant(this.chiffreAffaires)} FCFA
  ‚Ä¢ Personne physique: ${this.estPersonnePhysique ? 'Oui' : 'Non'}
  ‚Ä¢ Entreprise individuelle: ${this.estEntrepriseIndividuelle ? 'Oui' : 'Non'}
  ‚Ä¢ Ann√©e de cr√©ation: ${this.anneeCreation}
  ‚Ä¢ Ann√©e courante: ${this.anneeCourante}
  ‚Ä¢ TPS ann√©e pr√©c√©dente: ${this.formatMontant(this.tpsAnneePrecedente)} FCFA
  
  CALCULS:
  ‚Ä¢ TPS de base (5%): ${this.formatMontant(resultat.tpsBase)} FCFA
  ‚Ä¢ Redevance RTB: ${this.formatMontant(resultat.redevanceRtb)} FCFA
  ‚Ä¢ TPS TOTALE: ${this.formatMontant(resultat.tpsTotale)} FCFA
  
  ACOMPTES:
  ‚Ä¢ 1er acompte (10 f√©vrier): ${this.formatMontant(resultat.acompte1)} FCFA
  ‚Ä¢ 2e acompte (10 juin): ${this.formatMontant(resultat.acompte2)} FCFA
  ‚Ä¢ Solde (30 avril N+1): ${this.formatMontant(resultat.solde)} FCFA
  
  INFORMATIONS:
  `;
  
      resultat.messages.forEach(message => {
        rapport += `‚Ä¢ ${message}\n`;
      });
  
      if (Object.keys(resultat.amendes).length > 0) {
        rapport += '\nAMENDES:\n';
        Object.entries(resultat.amendes).forEach(([typeAmende, montant]) => {
          rapport += `‚Ä¢ ${typeAmende}: ${this.formatMontant(montant)} FCFA\n`;
        });
      }
  
      return rapport;
    }
  
    /**
     * Valide la configuration avant le calcul
     */
    public validerConfiguration(): { valide: boolean; erreurs: string[] } {
      const erreurs: string[] = [];
  
      if (this.chiffreAffaires < 0) {
        erreurs.push('Le chiffre d\'affaires ne peut pas √™tre n√©gatif');
      }
  
      if (this.anneeCreation > this.anneeCourante) {
        erreurs.push('L\'ann√©e de cr√©ation ne peut pas √™tre post√©rieure √† l\'ann√©e courante');
      }
  
      if (this.tpsAnneePrecedente < 0) {
        erreurs.push('La TPS de l\'ann√©e pr√©c√©dente ne peut pas √™tre n√©gative');
      }
  
      return {
        valide: erreurs.length === 0,
        erreurs
      };
    }
  
    /**
     * M√©thode utilitaire pour cr√©er une instance pr√©-configur√©e
     */
    public static creerAvecConfiguration(config: ConfigurationTPS): MoteurCalculTPS {
      const moteur = new MoteurCalculTPS();
      moteur.configurer(config);
      return moteur;
    }
  }

export type { ConfigurationTPS };
export { MoteurCalculTPS };
